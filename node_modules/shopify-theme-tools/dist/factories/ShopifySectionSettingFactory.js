"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShopifySectionSettingFactory = exports.ShopifySectionSettingTypes = void 0;
const inquirer_1 = __importDefault(require("inquirer"));
var ShopifySectionSettingTypes;
(function (ShopifySectionSettingTypes) {
    ShopifySectionSettingTypes["checkbox"] = "checkbox";
    ShopifySectionSettingTypes["number"] = "number";
    ShopifySectionSettingTypes["radio"] = "radio";
    ShopifySectionSettingTypes["range"] = "range";
    ShopifySectionSettingTypes["select"] = "select";
    ShopifySectionSettingTypes["text"] = "text";
    ShopifySectionSettingTypes["textarea"] = "textarea";
    ShopifySectionSettingTypes["article"] = "article";
    ShopifySectionSettingTypes["blog"] = "blog";
    ShopifySectionSettingTypes["collection"] = "collection";
    ShopifySectionSettingTypes["collection_list"] = "collection_list";
    ShopifySectionSettingTypes["color"] = "color";
    ShopifySectionSettingTypes["color_background"] = "color_background";
    ShopifySectionSettingTypes["color_scheme"] = "color_scheme";
    ShopifySectionSettingTypes["color_scheme_group"] = "color_scheme_group";
    ShopifySectionSettingTypes["font_picker"] = "font_picker";
    ShopifySectionSettingTypes["html"] = "html";
    ShopifySectionSettingTypes["image_picker"] = "image_picker";
    ShopifySectionSettingTypes["inline_richtext"] = "inline_richtext";
    ShopifySectionSettingTypes["link_list"] = "link_list";
    ShopifySectionSettingTypes["liquid"] = "liquid";
    ShopifySectionSettingTypes["metaobject"] = "metaobject";
    ShopifySectionSettingTypes["metaobject_list"] = "metaobject_list";
    ShopifySectionSettingTypes["page"] = "page";
    ShopifySectionSettingTypes["product"] = "product";
    ShopifySectionSettingTypes["product_list"] = "product_list";
    ShopifySectionSettingTypes["richtext"] = "richtext";
    ShopifySectionSettingTypes["text_alignment"] = "text_alignment";
    ShopifySectionSettingTypes["url"] = "url";
    ShopifySectionSettingTypes["video"] = "video";
    ShopifySectionSettingTypes["video_url"] = "video_url";
})(ShopifySectionSettingTypes || (exports.ShopifySectionSettingTypes = ShopifySectionSettingTypes = {}));
class ShopifySectionSettingFactoryClass {
    async build(liquid) {
        const settingType = await this.getSettingType();
        const settingBaseInfo = await this.getSettingBaseInfo(liquid);
        const settingDefaultValue = await this.getSettingDefaultValue(settingType);
        const settingInfo = await this.getSettingInfo();
        const settingExtraInfo = await this.getSettingExtraInfo(settingType);
        const setting = {
            type: settingType,
            id: settingBaseInfo.id,
            label: settingBaseInfo.label,
            default: settingDefaultValue,
            info: settingInfo,
            ...settingExtraInfo,
        };
        return setting;
    }
    async getSettingType() {
        const typeAnswers = await inquirer_1.default.prompt([
            {
                type: "list",
                name: "settingType",
                message: "Setting type *:",
                default: "create:section",
                choices: Object.keys(ShopifySectionSettingTypes),
            },
        ]);
        return typeAnswers.settingType;
    }
    async getSettingBaseInfo(liquid) {
        const baseAnswers = await inquirer_1.default.prompt([
            {
                type: "input",
                name: "settingId",
                message: "Setting ID *:",
                default: "your_setting_id",
                validate: (value) => {
                    if (!value) {
                        return "Setting ID can't be empty";
                    }
                    if (liquid && liquid.validateSectionSettingExists(value)) {
                        return "Setting ID already exists";
                    }
                    return true;
                },
            },
            {
                type: "input",
                name: "settingLabel",
                default: "Your setting label",
                message: "Setting label *:",
                validate: (value) => {
                    return value ? true : "Setting label can't be empty";
                },
            },
        ]);
        return { id: baseAnswers.settingId, label: baseAnswers.settingLabel };
    }
    async getSettingDefaultValue(type) {
        switch (type) {
            case ShopifySectionSettingTypes.number:
            case ShopifySectionSettingTypes.range:
                const defaultAnswersNumber = await inquirer_1.default.prompt([
                    {
                        type: "number",
                        name: "settingDefault",
                        message: "Setting default value:",
                    },
                ]);
                if (defaultAnswersNumber.settingDefault) {
                    return defaultAnswersNumber.settingDefault;
                }
                break;
            case ShopifySectionSettingTypes.checkbox:
                const defaultAnswersBool = await inquirer_1.default.prompt([
                    {
                        type: "confirm",
                        name: "settingDefault",
                        message: "Default checked:",
                        default: false,
                    },
                ]);
                if (defaultAnswersBool.settingDefault) {
                    return defaultAnswersBool.settingDefault;
                }
                break;
            case ShopifySectionSettingTypes.text:
            case ShopifySectionSettingTypes.textarea:
            case ShopifySectionSettingTypes.select:
            case ShopifySectionSettingTypes.radio:
                const defaultAnswersString = await inquirer_1.default.prompt([
                    {
                        type: "input",
                        name: "settingDefault",
                        message: "Setting default value:",
                    },
                ]);
                if (defaultAnswersString.settingDefault) {
                    return defaultAnswersString.settingDefault;
                }
                break;
        }
    }
    async getSettingInfo() {
        const infoAnswers = await inquirer_1.default.prompt([
            {
                type: "input",
                name: "settingInfo",
                message: "Setting info:",
            },
        ]);
        if (infoAnswers.settingInfo) {
            return infoAnswers.settingInfo;
        }
    }
    async getSettingExtraInfo(type) {
        switch (type) {
            case ShopifySectionSettingTypes.text:
            case ShopifySectionSettingTypes.textarea:
                const textAnswer = await inquirer_1.default.prompt([
                    {
                        type: "input",
                        name: "placeholder",
                        message: "Setting placeholder:",
                    },
                ]);
                return textAnswer.placeholder
                    ? { placeholder: textAnswer.placeholder }
                    : undefined;
            case ShopifySectionSettingTypes.range:
                const rangeAnswer = await inquirer_1.default.prompt([
                    {
                        type: "number",
                        name: "min",
                        message: "Setting min *:",
                        validate: (value) => {
                            return value ? true : "Min can't be empty";
                        },
                    },
                    {
                        type: "number",
                        name: "max",
                        message: "Setting max *:",
                        validate: (value) => {
                            return value ? true : "Max can't be empty";
                        },
                    },
                    {
                        type: "number",
                        name: "step",
                        message: "Setting step:",
                    },
                    {
                        type: "input",
                        name: "unit",
                        message: "Setting unit:",
                    },
                ]);
                return {
                    min: rangeAnswer.min,
                    max: rangeAnswer.max,
                    step: rangeAnswer.step,
                    unit: rangeAnswer.unit,
                };
            case ShopifySectionSettingTypes.radio:
            case ShopifySectionSettingTypes.select:
                let addMoreOption = true;
                const options = [];
                while (addMoreOption) {
                    const optionAnswer = await inquirer_1.default.prompt([
                        {
                            type: "input",
                            name: "optionLabel",
                            message: "Option label *:",
                            validate: (value) => {
                                return value ? true : "Option label can't be empty";
                            },
                        },
                        {
                            type: "input",
                            name: "optionValue",
                            message: "Option value *:",
                            validate: (value) => {
                                return value ? true : "Option value can't be empty";
                            },
                        },
                    ]);
                    options.push({
                        label: optionAnswer.optionLabel,
                        value: optionAnswer.optionValue,
                    });
                    addMoreOption = (await inquirer_1.default.prompt([
                        {
                            type: "confirm",
                            name: "addMoreOption",
                            message: "Do you want to add another option?",
                            default: false,
                        },
                    ])).addMoreOption;
                }
                return { options };
        }
        return {};
    }
}
let factory = null;
exports.ShopifySectionSettingFactory = (() => {
    if (!factory) {
        factory = new ShopifySectionSettingFactoryClass();
    }
    return factory;
})();
