"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = sectionBlockAdd;
const inquirer_1 = __importDefault(require("inquirer"));
const ShopifySectionSettingFactory_1 = require("../factories/ShopifySectionSettingFactory");
const ShopifyLiquid_1 = __importDefault(require("../writers/ShopifyLiquid"));
const ShopifyTrans_1 = __importDefault(require("../writers/ShopifyTrans"));
async function sectionBlockAdd() {
    let addMoreBlock = true;
    const sectionBlocks = [];
    const sectionAnswers = await inquirer_1.default.prompt([
        {
            type: "input",
            name: "sectionFileName",
            message: "Section filename:",
            default: "nova-collection-list",
            validate: (value) => {
                return value ? true : "Section filename can't be empty";
            },
        },
    ]);
    const liquid = new ShopifyLiquid_1.default("", sectionAnswers.sectionFileName);
    const trans = new ShopifyTrans_1.default("", sectionAnswers.sectionFileName);
    liquid.from(sectionAnswers.sectionFileName);
    while (addMoreBlock) {
        const blockAnswers = await inquirer_1.default.prompt([
            {
                type: "input",
                name: "blockName",
                message: "Block name *:",
                default: "Your block name ",
                validate: (value) => {
                    return value ? true : "Block name can't be empty";
                },
            },
            {
                type: "input",
                name: "blockType",
                message: "Block type *:",
                default: "your_block_type",
                validate: (value) => {
                    if (!value) {
                        return "Block type can't be empty";
                    }
                    if (liquid.validateBlockTypeExists(value)) {
                        return "Block type already exists";
                    }
                    return true;
                },
            },
            {
                type: "confirm",
                name: "addSetting",
                message: "Do you want to add block setting?",
                default: true,
            },
        ]);
        const block = {
            name: blockAnswers.blockName,
            type: blockAnswers.blockType,
        };
        let addMoreSetting = blockAnswers.addSetting;
        while (addMoreSetting) {
            block.settings = (block.settings || []);
            const setting = await ShopifySectionSettingFactory_1.ShopifySectionSettingFactory.build();
            if (setting) {
                block.settings.push(setting);
            }
            addMoreSetting = (await inquirer_1.default.prompt([
                {
                    type: "confirm",
                    name: "addMoreSetting",
                    message: "Do you want to add another block setting?",
                    default: false,
                },
            ])).addMoreSetting;
        }
        sectionBlocks.push(block);
        addMoreBlock = (await inquirer_1.default.prompt([
            {
                type: "confirm",
                name: "addMoreBlock",
                message: "Do you want to add another block?",
                default: false,
            },
        ])).addMoreBlock;
    }
    liquid.addSectionBlocks(sectionBlocks).save();
    await trans.addSectionBlocks(sectionBlocks);
}
