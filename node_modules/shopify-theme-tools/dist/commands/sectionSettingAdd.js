"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = sectionSettingAdd;
const inquirer_1 = __importDefault(require("inquirer"));
const ShopifyLiquid_1 = __importDefault(require("../writers/ShopifyLiquid"));
const ShopifyTrans_1 = __importDefault(require("../writers/ShopifyTrans"));
const ShopifySectionSettingFactory_1 = require("../factories/ShopifySectionSettingFactory");
async function sectionSettingAdd() {
    let addMore = true;
    const sectionAnswers = await inquirer_1.default.prompt([
        {
            type: "input",
            name: "sectionFileName",
            message: "Section filename:",
            default: "nova-collection-list",
        },
    ]);
    if (!sectionAnswers.sectionFileName) {
        throw new Error("Section filename can't be empty");
    }
    const liquid = new ShopifyLiquid_1.default("", sectionAnswers.sectionFileName);
    const trans = new ShopifyTrans_1.default("", sectionAnswers.sectionFileName);
    const sectionSettings = [];
    liquid.from(sectionAnswers.sectionFileName);
    while (addMore) {
        const setting = await ShopifySectionSettingFactory_1.ShopifySectionSettingFactory.build(liquid);
        if (!setting) {
            continue;
        }
        sectionSettings.push(setting);
        addMore = (await inquirer_1.default.prompt([
            {
                type: "confirm",
                name: "addMore",
                message: "Do you want to add another setting?",
                default: false,
            },
        ])).addMore;
    }
    liquid.addSectionSettings(sectionSettings).save();
    await trans.addSectionSettings(sectionSettings);
}
